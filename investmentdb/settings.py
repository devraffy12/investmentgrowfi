"""
Django settings for investmentdb project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import json
import firebase_admin
from firebase_admin import credentials
import dj_database_url

# Load .env file for local development
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-x%&xa7pxg5539!tyj4&947kd_gdk5^!@f2u4fq(^=k&z$wx*dz')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

# Production vs Development environment detection
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

# Auto-detect Render.com production environment
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    # Running on Render.com - force production mode
    IS_PRODUCTION = True
    ENVIRONMENT = 'production'
    print(f"üöÄ Detected Render.com deployment: {RENDER_EXTERNAL_HOSTNAME}")
else:
    IS_PRODUCTION = ENVIRONMENT == 'production'

# Security Headers and Content Protection
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# HTTPS settings for production
if IS_PRODUCTION:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0

# Session and Cookie Security
SESSION_COOKIE_SECURE = IS_PRODUCTION
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

CSRF_COOKIE_SECURE = IS_PRODUCTION
CSRF_COOKIE_HTTPONLY = True
CSRF_TRUSTED_ORIGINS = [
    'https://*.herokuapp.com',
    'https://*.railway.app',
    'https://*.vercel.app',
    'https://*.onrender.com',
    'https://investmentgrowfi.onrender.com',
    'https://cloud.la2568.site',
    'https://*.la2568.site',
]

# Content Security Policy
CSP_DEFAULT_SRC = ["'self'"]
CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'", "'unsafe-eval'", 
                  "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com",
                  "https://www.gstatic.com", "https://apis.google.com"]
CSP_STYLE_SRC = ["'self'", "'unsafe-inline'", 
                 "https://cdn.jsdelivr.net", "https://cdnjs.cloudflare.com", 
                 "https://fonts.googleapis.com"]
CSP_FONT_SRC = ["'self'", "https://fonts.gstatic.com", "https://cdnjs.cloudflare.com"]
CSP_IMG_SRC = ["'self'", "data:", "https:", "blob:"]
CSP_CONNECT_SRC = ["'self'", "https://cloud.la2568.site", "https://*.la2568.site",
                   "https://*.firebaseio.com", "https://*.googleapis.com"]

# Allowed hosts configuration
if IS_PRODUCTION:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        '.herokuapp.com',
        '.railway.app',
        '.vercel.app',
        '.onrender.com',
        'investmentgrowfi.onrender.com',
        '52.77.112.163',  # Galaxy callback IP
        os.environ.get('ALLOWED_HOST', ''),
    ]
    # Remove empty strings
    ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host]
else:
    ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # For number formatting
    'myproject',
    'payments',
    'admindashboard',  # New admin dashboard app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'investmentdb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myproject.context_processors.notification_count',
                'myproject.context_processors.firebase_client_config',
            ],
        },
    },
]

WSGI_APPLICATION = 'investmentdb.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL for production, SQLite for development
if os.environ.get('DATABASE_URL'):
    DATABASES = {
        'default': dj_database_url.config(
            default=os.environ.get('DATABASE_URL'),
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }

# Database connection pooling for production
if IS_PRODUCTION and 'postgresql' in DATABASES['default']['ENGINE']:
    DATABASES['default'].update({
        'CONN_MAX_AGE': 600,
        'OPTIONS': {
            'MAX_CONNS': 20,
            'sslmode': 'require',
        }
    })

# Cache configuration
if IS_PRODUCTION:
    # Use dummy cache for production (no Redis required)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }
else:
    # Local memory cache for development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }

# Session storage
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Manila'  # Philippine timezone
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files storage
if IS_PRODUCTION:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
else:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# WhiteNoise settings
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_MAX_AGE = 31536000 if IS_PRODUCTION else 0

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Message framework tags
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

# Email configuration
if IS_PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)
    SERVER_EMAIL = DEFAULT_FROM_EMAIL
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Firebase Configuration
FIREBASE_INITIALIZED = False
print(f"üîç Firebase Debug - IS_PRODUCTION: {IS_PRODUCTION}")
print(f"üîç Firebase Debug - ENVIRONMENT: {ENVIRONMENT}")
print(f"üîç Firebase Debug - RENDER_EXTERNAL_HOSTNAME: {os.environ.get('RENDER_EXTERNAL_HOSTNAME', 'None')}")

try:
    if not firebase_admin._apps:
        # For production (Render.com), use hardcoded credentials
        if IS_PRODUCTION:
            print("üî• Using production Firebase credentials for Render.com")
            # For Render.com, use hard-coded credentials
            firebase_creds = {
                "type": "service_account",
                "project_id": "investment-6d6f7",
                "private_key_id": "a8f39ea0b077dd4da8483f04a742fd2aab925fc3",
                "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDd+CUC3F2Gwt/Z\nnHl/bIg8cOlW8FBu+lnxYIsbNW2zCRm8EWRTTqHIFFklE01y6GGEDHzzZphxE2Bj\nck/7jytkG9decAk2qRMOXAcK5qGO37ErOScD05QrGLrswKwcIKp6bM6aiVOGthgt\nW6OhIRnal56weun6VG5CxR+wzI7hfHWZ3aOXstP+daNH4mBpsjGDgIEVdcVqG57W\nBJemeqNXIBKVRGBhkZQLqsRpPvMQVMHkAYTvoGHs9VFyzaNJkrHDy5WOsYwB52h5\nPHd0u286T0Bk8J45F5/IDsQq3wyUNndhuK7raMICc64gAaqVmdd71tBxrBlJonlk\n72nLBbonAgMBAAECggEAauwKYAtone6nR7rBJ+lO4tZ9ABz4kczUoJohx/R/qDtd\nAyPZkOuSsL9khaB7sTtRJfuiANlN20I7Lww0jPfVLf7fSqVrOsJM5KDd35li/2Cv\nhiOcsJItkGj0OfFBtrbhh+F70CMQcharJMY81vQL8SkSDu7WYHhlOJKeBlszBFg6\nuBDbbgTmFlLSZL6enxzkQnY8623ExqEQejso7lddUaYcbXxZZRICdGMLgvgsfH7t\nnXPhpyC0tH8+zzjwL+bvX/0xfAf8Nm24pn+sWwBYbrXwhufg22vB7Tqqupb9LQXx\nOt/VGD1XyE8ike8BWKxpw8xmroLc/jtPRF/q/Uh+KQKBgQD3jpFPk6DWX5I6LH2H\nHGWo5khNP3patRg5TM9Lf8GhQxW8pw/GYTrL5nhS2ol8XtfyQaz/QS87hWmoFlqa\n0unZ7cqxrD8xI1Z9XgQjFK4Og3hklr6Tu4vKGO8vGe2h/XJWwB937Gw0s1pS3quY\n5av+csxbICdW5772p0VPrM/w2wKBgQDliiucj97ei1iIyxJujei46vuhsbZKy0hQ\n51ngeRPZsbqSn4gYVu8gIIvhiZ5p3gD5aON2a3cL+ZGWQIPfYiy2iDDeXEBiS0l1\nk93Mp2ASdbP4h5Gook72zV/CTjG7hNPbeBx4jvp50TZQwuaSuUft+LtbZu49blFU\ncJW2ZbSHpQKBgQDpQ2xG2GtwNEO8DxoFCsv712l/aHXpLMTzkR2vHWWdh3He/mgN\n3KYjZToxj/yGtXOzsRDKwGg6JJ8HJHEhe+WgVMFuo0g0DAE+Ri2NxLmxsU3rMmPH\nHqw8tTwDXOIehouLlKLSRHM9QVa1yV1Vx+xF6XQH1YdcCyhUkA7uYX7aiwKBgFq3\ngcbtgUp4zfO6Nj2lLh2vGOXtozrqHlmDJZ02nObDfBYooJPl/7m1wzLOveHfUIlB\nr+wEStdbufMk6jllxoAZUR8AXJ28XXrvhpA0ch65j/ggNCvugcC+qCLV3ofa1hP9\n41quP0XXrly6un+wZEIjtIBKLMvwhooVuMWOaovVAoGBAI51FTSfXhZ8UxbqH+rz\nk6590a7ICBZ74win/QA3nET9Kt6KHiq5v8qIHlBGc7CasY+/6CLnJs+5FanbusGz\nVR7dJyVc8X7nhsaT8/8/2gVjPql+cdhkpIQhtVn4zTKWUz59/f/TMDy18ab7VC69\n5VQm4ZDyHHmVsdRXjPN7Hiby\n-----END PRIVATE KEY-----\n",
                "client_email": "firebase-adminsdk-fbsvc@investment-6d6f7.iam.gserviceaccount.com",
                "client_id": "113203784259300491698",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40investment-6d6f7.iam.gserviceaccount.com",
                "universe_domain": "googleapis.com"
            }
            cred = credentials.Certificate(firebase_creds)
            firebase_admin.initialize_app(cred, {
                'databaseURL': 'https://investment-6d6f7-default-rtdb.firebaseio.com'   
            })
            FIREBASE_INITIALIZED = True
            print("‚úÖ Firebase Admin SDK initialized successfully with production credentials!")
        else:
            # For local development, try to use Firebase too
            print("üî• Attempting to initialize Firebase for local development...")
            firebase_service_account_path = BASE_DIR / 'firebase-service-account.json'
            if firebase_service_account_path.exists():
                try:
                    cred = credentials.Certificate(str(firebase_service_account_path))
                    firebase_admin.initialize_app(cred, {
                        'databaseURL': 'https://investment-6d6f7-default-rtdb.firebaseio.com'   
                    })
                    FIREBASE_INITIALIZED = True
                    print("‚úÖ Firebase Admin SDK initialized successfully with local file!")
                except Exception as local_error:
                    print(f"‚ö†Ô∏è Could not initialize Firebase locally: {local_error}")
                    print("üî• Firebase will be enabled automatically in production on Render.com")
                    FIREBASE_INITIALIZED = False
            else:
                print("‚ö†Ô∏è Firebase credentials file not found - Firebase disabled for local development")
                print("üî• Firebase will be enabled automatically in production on Render.com")
                FIREBASE_INITIALIZED = False
except Exception as e:
    print(f"‚ö†Ô∏è Warning: Could not initialize Firebase Admin SDK: {e}")
    print("Firebase features will be disabled")
    FIREBASE_INITIALIZED = False

# Firebase Credentials File Setting (for firebase_app.py)
FIREBASE_CREDENTIALS_FILE = str(BASE_DIR / 'firebase-service-account.json')

# Firebase Client Config (for frontend use)
FIREBASE_CLIENT_CONFIG = {
    "apiKey": "AIzaSyBbVKoWwHBfvDRGCEGMYHc9KRlpQ-BsOJQ",
    "authDomain": "investment-6d6f7.firebaseapp.com",
    "databaseURL": "https://investment-6d6f7-default-rtdb.firebaseio.com",
    "projectId": "investment-6d6f7",
    "storageBucket": "investment-6d6f7.firebasestorage.app",
    "messagingSenderId": "113203784259",
    "appId": "1:534129560092:web:d07eff2cd2466059d16dd9",
    "measurementId": "G-9VRMN7QCFN"
}

# Site URL for callbacks
SITE_URL = os.environ.get('SITE_URL', 'https://investmentgrowfi.onrender.com' if IS_PRODUCTION else 'http://127.0.0.1:8000')

# ========================================
# GALAXY PAYMENT API CONFIGURATION
# ========================================

# Galaxy System API Configuration
GALAXY_MERCHANT_ID = 'RodolfHitler'
GALAXY_SECRET_KEY = '86cb40fe1666b41eb0ad21577d66baef'
GALAXY_BASE_URL = 'https://cloud.la2568.site'
GALAXY_CALLBACK_IP = '52.77.112.163'

# Galaxy API Endpoints
GALAXY_ENDPOINTS = {
    'DEPOSIT': '/api/transfer',
    'WITHDRAWAL': '/api/daifu', 
    'QUERY': '/api/query',
    'BALANCE': '/api/me',
    'RECEIPT': '/api/receipt',
}

# Galaxy Payment Configuration
GALAXY_CONFIG = {
    'MERCHANT_ID': GALAXY_MERCHANT_ID,
    'SECRET_KEY': GALAXY_SECRET_KEY,
    'BASE_URL': GALAXY_BASE_URL,
    'CALLBACK_IP': GALAXY_CALLBACK_IP,
    'TIMEOUT': 30,
    'MAX_RETRIES': 3,
    'ENABLED': True,
    
    # Galaxy Payment Types (according to API docs)
    'PAYMENT_TYPES': {
        '1': 'QR Code',
        '2': 'WEB_H5', 
        '3': 'Fast Direct',
        '7': 'Original Channel'
    },
    
    # Galaxy Bank Codes (GCash and PayMaya only)
    'BANK_CODES': {
        'gcash': 'gcash',
        'paymaya': 'PMP'
    },
    
    # Payment URLs
    'CALLBACK_URL': f"{SITE_URL}/payment/callback/",
    'SUCCESS_URL': f"{SITE_URL}/payment/success/",
    'CANCEL_URL': f"{SITE_URL}/payment/cancel/",
    'RETURN_URL': f"{SITE_URL}/payment/return/",
    
    # Transaction Limits
    'MIN_AMOUNT': 1.00,
    'MAX_AMOUNT': 50000.00,
    'DAILY_LIMIT': 500000.00,
}

# Payment API Configuration - LA2568 Integration
PAYMENT_API_CONFIG = {
    # LA2568 API Settings
    'base_url': GALAXY_BASE_URL,  # https://cloud.la2568.site
    'merchant_id': GALAXY_MERCHANT_ID,  # RodolfHitler
    'api_key': GALAXY_SECRET_KEY,  # 86cb40fe1666b41eb0ad21577d66baef
    'callback_ip': GALAXY_CALLBACK_IP,
    'timeout': 30,
    'max_retries': 3,
    'enabled': True,
    
    # Supported Payment Methods (GCash and PayMaya only)
    'PAYMENT_METHODS': {
        'gcash': {
            'name': 'GCash',
            'logo': '/static/images/gcash-logo.png',
            'min_amount': 1.00,
            'max_amount': 50000.00,
            'enabled': True,
            'bank_code': 'gcash'
        },
        'paymaya': {
            'name': 'PayMaya', 
            'logo': '/static/images/paymaya-logo.png',
            'min_amount': 1.00,
            'max_amount': 50000.00,
            'enabled': True,
            'bank_code': 'PMP'
        }
    },
    
    # Payment redirect URLs
    'SUCCESS_URL': f"{SITE_URL}/payment/success/",
    'CANCEL_URL': f"{SITE_URL}/payment/cancel/",
    'CALLBACK_URL': f"{SITE_URL}/payment/callback/",
    'NOTIFY_URL': f"{SITE_URL}/payment/notify/",
}

# Celery Configuration (for background tasks) - Disabled for production
# if IS_PRODUCTION:
#     CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')
#     CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')
#     CELERY_ACCEPT_CONTENT = ['json']
#     CELERY_TASK_SERIALIZER = 'json'
#     CELERY_RESULT_SERIALIZER = 'json'
#     CELERY_TIMEZONE = TIME_ZONE
#     CELERY_TASK_ROUTES = {
#         'payments.tasks.*': {'queue': 'payments'},
#         'myproject.tasks.*': {'queue': 'default'},
#     }

# Rate limiting
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'

# Security settings for production
if IS_PRODUCTION:
    # Additional security headers
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    
    # Admin security
    ADMIN_URL = os.environ.get('ADMIN_URL', 'admin/')
    
    # Hide server information - removed DISALLOWED_USER_AGENTS to prevent CommonMiddleware error

# Create logs directory if it doesn't exist (before logging config)
LOGS_DIR = BASE_DIR / 'logs'
if IS_PRODUCTION or os.environ.get('ENABLE_FILE_LOGGING', 'False').lower() == 'true':
    os.makedirs(LOGS_DIR, exist_ok=True)
    USE_FILE_LOGGING = True
else:
    USE_FILE_LOGGING = False

# Logging configuration
LOGGING_HANDLERS = {
    'console': {
        'class': 'logging.StreamHandler',
        'formatter': 'simple',
    },
}

# Add file handler only if directory exists and file logging is enabled
if USE_FILE_LOGGING:
    LOGGING_HANDLERS['file'] = {
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': str(LOGS_DIR / 'django.log'),
        'maxBytes': 1024*1024*15,  # 15MB
        'backupCount': 10,
        'formatter': 'verbose',
    }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': LOGGING_HANDLERS,
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'myproject': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'payments': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'galaxy_api': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'galaxy_payment': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'], 
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'file'] if USE_FILE_LOGGING else ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Development vs Production specific settings
if DEBUG:
    # Development tools
    try:
        import debug_toolbar
        INSTALLED_APPS.append('debug_toolbar')
        MIDDLEWARE.insert(1, 'debug_toolbar.middleware.DebugToolbarMiddleware')
        INTERNAL_IPS = ['127.0.0.1', 'localhost']
        DEBUG_TOOLBAR_CONFIG = {
            'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
        }
    except ImportError:
        pass
    
    # Disable cache in development
    CACHES['default']['TIMEOUT'] = 1
else:
    # Production optimizations
    CONN_MAX_AGE = 600
    
    # Error monitoring (add your preferred service)
    # SENTRY_DSN = os.environ.get('SENTRY_DSN')
    # if SENTRY_DSN:
    #     import sentry_sdk
    #     from sentry_sdk.integrations.django import DjangoIntegration
    #     sentry_sdk.init(
    #         dsn=SENTRY_DSN,
    #         integrations=[DjangoIntegration()],
    #         traces_sample_rate=0.1,
    #         send_default_pii=True
    #     )

# Custom settings for your app
APP_SETTINGS = {
    'MAX_TRANSACTION_AMOUNT': 100000.00,  # Maximum transaction amount
    'MIN_TRANSACTION_AMOUNT': 1.00,       # Minimum transaction amount
    'TRANSACTION_FEE_PERCENTAGE': 0.02,   # 2% transaction fee
    'DAILY_TRANSACTION_LIMIT': 500000.00, # Daily transaction limit per user
    'ENABLE_2FA': IS_PRODUCTION,          # Enable 2FA in production
    'MAINTENANCE_MODE': False,            # Maintenance mode flag
}

# API throttling settings
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'payment': '10/minute',
    }
}

# Debug output
print(f"üöÄ Django settings loaded - Environment: {ENVIRONMENT}")
print(f"üîê Debug mode: {DEBUG}")
print(f"üî• Firebase initialized: {FIREBASE_INITIALIZED}")
print(f"üí∞ Galaxy API configured:")
print(f"   Merchant ID: {GALAXY_MERCHANT_ID}")
print(f"   Base URL: {GALAXY_BASE_URL}")
print(f"   Callback IP: {GALAXY_CALLBACK_IP}")
print(f"   Secret Key: {GALAXY_SECRET_KEY[:10]}...")
print(f"   Enabled: {GALAXY_CONFIG['ENABLED']}")
print(f"   Payment Methods: GCash, PayMaya")
print(f"üìß Email backend: {EMAIL_BACKEND}")
print(f"üóÑÔ∏è  Database: {DATABASES['default']['ENGINE'].split('.')[-1]}")
print(f"üíæ Cache backend: {CACHES['default']['BACKEND'].split('.')[-1]}")
print(f"üìù File logging: {'Enabled' if USE_FILE_LOGGING else 'Disabled'}")
